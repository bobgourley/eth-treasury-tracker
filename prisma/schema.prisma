// Ethereum Treasury Tracker Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Company {
  id                  Int      @id @default(autoincrement())
  name                String
  ticker              String? @unique
  website             String?  @map("website")
  ethHoldings         Float?   @map("eth_holdings")
  ethAddress          String?  // Ethereum address for live tracking
  ethAddresses        String?  @map("eth_addresses") // JSON string of addresses
  marketCap           BigInt?  @map("market_cap")
  sharesOutstanding   BigInt?  @map("shares_outstanding")
  stockPrice          Float?   @map("stock_price")
  ethPerShare         Float?   @map("eth_per_share")
  mnavRatio           Float?   @map("mnav_ratio")
  stakingYield        Float?   @map("staking_yield")
  yieldSources        String?  @map("yield_sources")
  capitalStructure    String?  @map("capital_structure")
  fundingSources      String?  @map("funding_sources")
  lastUpdated         DateTime @default(now()) @map("last_updated")
  createdAt           DateTime @default(now()) @map("created_at")
  isActive            Boolean  @default(true) @map("is_active")

  @@map("companies")
}

model SystemMetrics {
  id                 Int      @id @default(autoincrement())
  totalEthHoldings   Float    @map("total_eth_holdings")
  totalCompanies     Int      @map("total_companies")
  ethPrice           Float?   @map("eth_price")
  totalEthValue      Float?   @map("total_eth_value")
  totalMarketCap     Float?   @map("total_market_cap")
  ethSupplyPercent   Float?   @map("eth_supply_percent")
  lastUpdate         DateTime @default(now()) @map("last_update")
  lastStockUpdate    DateTime? @map("last_stock_update")

  @@map("system_metrics")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isAdmin       Boolean   @default(false) @map("is_admin")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
