// Ethereum Treasury Tracker Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                  Int      @id @default(autoincrement())
  name                String
  ticker              String? @unique
  website             String?  @map("website")
  ethHoldings         Float?   @map("eth_holdings")
  ethAddress          String?  // Ethereum address for live tracking
  ethAddresses        String?  @map("eth_addresses") // JSON string of addresses
  marketCap           BigInt?  @map("market_cap")
  sharesOutstanding   BigInt?  @map("shares_outstanding")
  stockPrice          Float?   @map("stock_price")
  ethPerShare         Float?   @map("eth_per_share")
  mnavRatio           Float?   @map("mnav_ratio")
  stakingYield        Float?   @map("staking_yield")
  yieldSources        String?  @map("yield_sources")
  capitalStructure    String?  @map("capital_structure")
  fundingSources      String?  @map("funding_sources")
  lastUpdated         DateTime @default(now()) @map("last_updated")
  createdAt           DateTime @default(now()) @map("created_at")
  isActive            Boolean  @default(true) @map("is_active")

  @@index([isActive])
  @@index([ethHoldings])
  @@index([isActive, ethHoldings])
  @@map("companies")
}

model SystemMetrics {
  id                 Int      @id @default(autoincrement())
  totalEthHoldings   Float    @map("total_eth_holdings")
  totalCompanies     Int      @map("total_companies")
  ethPrice           Float?   @map("eth_price")
  totalEthValue      Float?   @map("total_eth_value")
  totalMarketCap     Float?   @map("total_market_cap")
  ethSupplyPercent   Float?   @map("eth_supply_percent")
  lastUpdate         DateTime @default(now()) @map("last_update")
  lastStockUpdate    DateTime? @map("last_stock_update")
  // ethPriceLastUpdate DateTime? @map("eth_price_last_update") // Removed - column doesn't exist in production
  // ethPriceSource     String?  @map("eth_price_source") // Removed - column doesn't exist in production

  @@map("system_metrics")
}

model DailySnapshot {
  id                 Int      @id @default(autoincrement())
  date               DateTime @unique @map("snapshot_date") // Date of the snapshot (YYYY-MM-DD)
  totalEthHoldings   Float    @map("total_eth_holdings")    // Sum of all companies' ETH holdings
  totalEthValue      Float    @map("total_eth_value")       // Total ETH value in USD
  totalMarketCap     Float    @map("total_market_cap")      // Sum of all companies' market caps
  ethPrice           Float    @map("eth_price")             // ETH price at snapshot time
  totalEthSupply     Float?   @map("total_eth_supply")      // Total ETH supply at snapshot time
  ethSupplyPercent   Float?   @map("eth_supply_percent")    // % of total ETH supply held
  companyCount       Int      @map("company_count")         // Number of active companies tracked
  createdAt          DateTime @default(now()) @map("created_at")
  
  @@map("daily_snapshots")
}

// ETF Models (completely isolated from company logic)
model Etf {
  id              Int      @id @default(autoincrement())
  symbol          String   @unique
  name            String?
  ethHoldings     Float?   @map("eth_holdings")     // Number of ETH held by the ETF
  totalValue      Float?   @map("total_value")      // ETH holdings * ETH price
  aum             Float?   @map("assets_under_management") // Total AUM from API
  expenseRatio    Float?   @map("expense_ratio")    // Annual expense ratio
  nav             Float?   @map("net_asset_value")  // Net Asset Value per share
  lastUpdated     DateTime @default(now()) @map("last_updated")
  createdAt       DateTime @default(now()) @map("created_at")
  isActive        Boolean  @default(true) @map("is_active")

  @@index([isActive])
  @@index([aum])
  @@index([isActive, aum])
  @@map("etfs")
}

model EtfMetrics {
  id              Int      @id @default(autoincrement())
  totalEthHeld    Float    @map("total_eth_held")   // Sum of all ETF ETH holdings
  totalAum        Float    @map("total_aum")        // Sum of all ETF AUM
  totalValue      Float    @map("total_value")      // Total value of all ETH held
  etfCount        Int      @map("etf_count")        // Number of active ETFs
  avgExpenseRatio Float?   @map("avg_expense_ratio") // Average expense ratio
  ethPrice        Float?   @map("eth_price")        // ETH price used for calculations
  lastUpdate      DateTime @default(now()) @map("last_update")
  
  @@map("etf_metrics")
}

// News Articles (cached from NewsAPI)
model NewsArticle {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  url           String   @unique
  urlToImage    String?  @map("url_to_image")
  publishedAt   DateTime @map("published_at")
  sourceName    String   @map("source_name")
  company       String?  // Associated company name if any
  ticker        String?  // Associated ticker if any
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  lastUpdated   DateTime @default(now()) @map("last_updated")

  @@index([publishedAt])
  @@index([company])
  @@map("news_articles")
}

// Ecosystem Summary (cached calculations)
model EcosystemSummary {
  id                    Int      @id @default(autoincrement())
  ethPrice              Float    @map("eth_price")
  ethSupply             Float    @map("eth_supply")
  totalTrackedEth       Float    @map("total_tracked_eth")
  totalTrackedPercentage Float   @map("total_tracked_percentage")
  companyCount          Int      @map("company_count")
  companyTotalEth       Float    @map("company_total_eth")
  companyTotalValue     Float    @map("company_total_value")
  companyPercentage     Float    @map("company_percentage")
  etfCount              Int      @map("etf_count")
  etfTotalEth           Float    @map("etf_total_eth")
  etfTotalValue         Float    @map("etf_total_value")
  etfPercentage         Float    @map("etf_percentage")
  lastUpdated           DateTime @default(now()) @map("last_updated")
  
  @@map("ecosystem_summaries")
}

// SEC Filings (comprehensive Ethereum-related SEC filings)
model SecFiling {
  id               Int      @id @default(autoincrement())
  accessionNumber  String   @unique @map("accession_number") // SEC accession number (unique identifier)
  companyName      String   @map("company_name")
  cik              String   // Central Index Key
  formType         String   @map("form_type")              // 10-K, 10-Q, 8-K, etc.
  filingDate       DateTime @map("filing_date")
  reportTitle      String?  @map("report_title")           // Title of the report/filing
  edgarUrl         String   @map("edgar_url")              // Direct link to SEC EDGAR filing
  fullTextUrl      String?  @map("full_text_url")          // Link to full text version
  localContentPath String?  @map("local_content_path")     // Future: path to locally stored content
  contentCached    Boolean  @default(false) @map("content_cached") // Future: whether content is stored locally
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")

  @@index([filingDate])
  @@index([companyName])
  @@index([formType])
  @@index([isActive])
  @@index([isActive, filingDate])
  @@map("sec_filings")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isAdmin       Boolean   @default(false) @map("is_admin")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
